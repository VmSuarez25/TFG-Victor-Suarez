import numpy as np  # Importamos NumPy para cálculos numéricos y manejo de matrices
import matplotlib.pyplot as plt  # Importamos Matplotlib para graficar
from matplotlib import cm  # Para usar una paleta de colores que diferencie las trayectorias

# Clase PénduloDoble: Representa un péndulo doble con sus propiedades físicas y dinámica
class PénduloDoble:
    def __init__(self, masa1, masa2, longitud1, longitud2, centro_masa_1, centro_masa_2, inercia1, inercia2, gravedad, friccion_aire=0.1, friccion_rod1=0, friccion_rod2=0):
        # Constructor: Inicializa las propiedades del péndulo doble
        self.masa1, self.masa2 = masa1, masa2  # Masas de los dos cuerpos (incluyendo barras)
        self.longitud1, self.longitud2 = longitud1, longitud2  # Longitudes de los brazos del péndulo
        self.centro_masa_1, self.centro_masa_2 = centro_masa_1, centro_masa_2  # Posición del centro de masa en cada brazo
        self.inercia1, self.inercia2 = inercia1, inercia2  # Momentos de inercia de cada brazo
        self.gravedad, self.friccion_rod1, self.friccion_rod2 = gravedad, friccion_rod1, friccion_rod2  # Gravedad y fricciones en las articulaciones
        self.friccion_aire = friccion_aire  # Coeficiente de fricción del aire (disipación)
        # Constantes precalculadas para la matriz de masa (MM), optimizan los cálculos
        self.M11_const = masa1 * centro_masa_1**2 + masa2 * longitud1**2 + inercia1  # Término constante de M11
        self.M22_const = masa2 * centro_masa_2**2 + inercia2  # Término constante de M22
        self.angulo = None  # Vector de ángulos (theta1, theta2), se inicializa después
        self.vel_ang = None  # Vector de velocidades angulares (dtheta1/dt, dtheta2/dt), se inicializa después
        self.energia_disipada = 0.0  # Energía disipada por fricción, acumulada durante la simulación

    def establecer_condiciones_iniciales(self, angulo1_i, angulo2_i, vel_ang1_i=0.0, vel_ang2_i=0.0):
        # Define las condiciones iniciales del sistema
        self.angulo = np.array([np.radians(angulo1_i), np.radians(angulo2_i)])  # Convierte ángulos de grados a radianes
        self.vel_ang = np.array([vel_ang1_i, vel_ang2_i])  # Velocidades angulares iniciales (por defecto 0)
        self.energia_disipada = 0.0  # Reinicia la energía disipada al establecer nuevas condiciones

    def calcular_matrices_sistema(self):
        # Calcula las matrices del sistema dinámico: masa (MM), Coriolis (CC), gravedad (GG) y disipación (DD)
        angulo, vel_ang = self.angulo, self.vel_ang  # Extrae ángulos y velocidades actuales
        M11 = self.M11_const  # Término constante de la matriz de masa para el primer péndulo
        M12 = self.masa2 * self.longitud1 * self.centro_masa_2 * np.cos(angulo[0] - angulo[1])  # Término de acoplamiento entre péndulos
        MM = np.array([[M11, M12], [M12, self.M22_const]])  # Matriz de masa simétrica
        k = self.masa2 * self.longitud1 * self.centro_masa_2 * np.sin(angulo[0] - angulo[1])  # Factor para la matriz de Coriolis
        CC = np.array([[0, k * vel_ang[1]], [-k * vel_ang[0], 0]])  # Matriz de fuerzas de Coriolis
        GG = np.array([(self.masa1 * self.centro_masa_1 + self.masa2 * self.longitud1) * self.gravedad * np.sin(angulo[0]), 
                       self.masa2 * self.centro_masa_2 * self.gravedad * np.sin(angulo[1])])  # Vector de fuerzas gravitacionales
        DD = np.diag([self.friccion_rod1 + self.friccion_aire, self.friccion_rod2 + self.friccion_aire])  # Matriz diagonal de disipación
        return MM, CC, GG, DD  # Retorna las cuatro matrices para la ecuación dinámica

    def integrar_dinamica(self, dt):
        # Integra las ecuaciones de movimiento usando el método de Runge-Kutta de orden 4 (RK4)
        torque = np.zeros(2)  # Torque externo (en este caso, ninguno)
        MM, CC, GG, DD = self.calcular_matrices_sistema()  # Calcula las matrices dinámicas
        def derivadas(angulo, vel_ang):
            # Calcula las aceleraciones angulares resolviendo la ecuación: MM * acel = torque - CC * vel - DD * vel - GG
            return np.linalg.inv(MM) @ (torque - CC @ vel_ang - DD @ vel_ang - GG)
        # Pasos del método RK4 para ángulos y velocidades
        k1v = self.vel_ang  # k1 para velocidad (dx/dt = v)
        k1a = derivadas(self.angulo, self.vel_ang)  # k1 para aceleración (dv/dt = a)
        k2v = self.vel_ang + 0.5 * dt * k1a  # k2 para velocidad
        k2a = derivadas(self.angulo + 0.5 * dt * k1v, self.vel_ang + 0.5 * dt * k1a)  # k2 para aceleración
        k3v = self.vel_ang + 0.5 * dt * k2a  # k3 para velocidad
        k3a = derivadas(self.angulo + 0.5 * dt * k2v, self.vel_ang + 0.5 * dt * k2a)  # k3 para aceleración
        k4v = self.vel_ang + dt * k3a  # k4 para velocidad
        k4a = derivadas(self.angulo + dt * k3v, self.vel_ang + dt * k3a)  # k4 para aceleración
        # Actualiza ángulos y velocidades con la combinación ponderada de los pasos RK4
        self.angulo += (dt / 6) * (k1v + 2*k2v + 2*k3v + k4v)
        self.vel_ang += (dt / 6) * (k1a + 2*k2a + 2*k3a + k4a)
        # Calcula la energía disipada por fricción (trabajo = fuerza * velocidad * dt)
        fuerza_rozamiento = np.dot(DD, self.vel_ang)  # Fuerza de fricción
        self.energia_disipada += np.sum(fuerza_rozamiento * self.vel_ang) * dt  # Acumula energía disipada
        return self.angulo, self.vel_ang  # Retorna los nuevos ángulos y velocidades

    def cinematica_directa(self):
        # Calcula las posiciones cartesianas (x, y) de las masas a partir de los ángulos
        x1 = self.longitud1 * np.sin(self.angulo[0])  # Coordenada x del primer péndulo
        y1 = -self.longitud1 * np.cos(self.angulo[0])  # Coordenada y del primer péndulo (negativo por convención)
        x2 = x1 + self.longitud2 * np.sin(self.angulo[1])  # Coordenada x del segundo péndulo
        y2 = y1 - self.longitud2 * np.cos(self.angulo[1])  # Coordenada y del segundo péndulo
        return (x1, y1), (x2, y2)  # Retorna las posiciones de ambas masas

    def obtener_energia_disipada(self):
        # Retorna la energía total disipada acumulada
        return self.energia_disipada

# Parámetros iniciales del sistema físico
parametros = {
    'masa1': 1.0, 'masa2': 3.0, 'longitud1': 1.5, 'longitud2': 1.0, 'masa_barra': 0.1, 'radio_barra': 0.05,
    'angulo1_i': 90.0, 'angulo2_i': 0.0, 'friccion_aire': 0.05  # Ajustamos la fricción para ver disipación
}

tiempo_max = 200  # Tiempo total de simulación (en segundos), largo para observar convergencia al atractor
dt = 1/60  # Paso de tiempo (equivalente a 60 FPS)

# Definimos las propiedades físicas ajustadas
masa1 = parametros['masa1'] + parametros['masa_barra']  # Masa total del primer péndulo (masa puntual + barra)
masa2 = parametros['masa2'] + parametros['masa_barra']  # Masa total del segundo péndulo
longitud1 = parametros['longitud1'] + parametros['radio_barra']  # Longitud ajustada del primer brazo
longitud2 = parametros['longitud2'] + parametros['radio_barra']  # Longitud ajustada del segundo brazo
inercia1 = (1/3) * masa1 * longitud1**2  # Momento de inercia del primer brazo (aproximado como barra uniforme)
inercia2 = (1/3) * masa2 * longitud2**2  # Momento de inercia del segundo brazo
gravedad = 9.8007  # Aceleración gravitacional en m/s^2
friccion_rod1 = 0  # Fricción en la articulación del primer péndulo (sin fricción)
friccion_rod2 = 0  # Fricción en la articulación del segundo péndulo (sin fricción)
friccion_aire = parametros['friccion_aire']  # Coeficiente de fricción del aire
centro_masa_1 = ((longitud1/2)*parametros['masa1'] + longitud1*parametros['masa_barra'])/masa1  # Centro de masa del primer brazo
centro_masa_2 = ((longitud2/2)*parametros['masa2'] + longitud2*parametros['masa_barra'])/masa2  # Centro de masa del segundo brazo

# Simulamos solo dos trayectorias con condiciones iniciales muy cercanas para mostrar sensibilidad al caos
num_trayectorias = 2
theta1_iniciales = np.linspace(90.0, 90.05, num_trayectorias)  # Variamos theta1 inicial en un rango pequeño
colores = cm.viridis(np.linspace(0, 1, num_trayectorias))  # Paleta de colores para distinguir trayectorias

plt.figure(figsize=(10, 8))  # Creamos una figura de tamaño 10x8 pulgadas

for idx, theta1_i in enumerate(theta1_iniciales):
    # Para cada trayectoria, creamos un nuevo péndulo con las condiciones iniciales dadas
    pendulo = PénduloDoble(masa1, masa2, longitud1, longitud2, centro_masa_1, centro_masa_2, inercia1, inercia2, gravedad, friccion_aire, friccion_rod1, friccion_rod2)
    pendulo.establecer_condiciones_iniciales(theta1_i, parametros['angulo2_i'])  # Establecemos theta1 variable y theta2 fijo

    # Listas para almacenar la evolución de theta1 y su velocidad angular
    theta1_hist = []
    vel_theta1_hist = []

    # Simulación en el tiempo
    num_steps = int(tiempo_max / dt)  # Número total de pasos
    for i in range(num_steps):
        angulo, vel_ang = pendulo.integrar_dinamica(dt)  # Integra la dinámica en cada paso
        theta1_hist.append(angulo[0])  # Guarda el ángulo del primer péndulo
        vel_theta1_hist.append(vel_ang[0])  # Guarda la velocidad angular del primer péndulo

    # Graficamos la trayectoria en el espacio de fases (theta1 vs vel_theta1)
    plt.plot(theta1_hist, vel_theta1_hist, color=colores[idx], label=f'Trayectoria (θ1 inicial = {theta1_i:.2f}°)', alpha=0.7)

# Punto de equilibrio (attractor): el estado estable donde theta1 = 0 y vel_theta1 = 0
plt.scatter([0], [0], color='red', s=100, label='Atractor (punto de equilibrio)')

# Configuración del gráfico
plt.xlabel(r'$\theta_1$ (rad)', fontsize=12)  # Etiqueta del eje x con notación matemática
plt.ylabel(r'$\dot{\theta}_1$ (rad/s)', fontsize=12)  # Etiqueta del eje y con notación matemática
plt.title('Diagrama de fases del péndulo doble: Caos y disipación\n($\\theta_1$ vs $\\dot{\\theta}_1$)', fontsize=14)  # Título con salto de línea
plt.grid(True)  # Activa la cuadrícula
plt.legend()  # Muestra la leyenda con las etiquetas de las trayectorias
plt.xlim(-2, 2)  # Limita el eje x para mejor visualización
plt.ylim(-5, 5)  # Limita el eje y para mejor visualización
plt.show()  # Muestra el gráfico
