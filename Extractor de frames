import cv2
import os
import numpy as np

# Configuración
video_path = "C:/Users/victo/Desktop/TFG/Visual Studio/Pendulo4.mp4"  # Cambia si usas un video nuevo
output_dir = "C:/Users/victo/Desktop/TFG/Visual Studio/frames_reales"  # Carpeta de salida
target_frames = 200  # Número aproximado de frames a extraer

# Crear la carpeta de salida
os.makedirs(output_dir, exist_ok=True)

# Abrir el video
cap = cv2.VideoCapture(video_path)
if not cap.isOpened():
    print(f"Error: No se pudo abrir el video en {video_path}")
    exit()

# Obtener propiedades del video
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = int(cap.get(cv2.CAP_PROP_FPS)) or 30
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
print(f"Video: {width}x{height}, {fps} FPS, {total_frames} frames")

# Calcular intervalo para obtener ~target_frames
frame_interval = max(1, total_frames // target_frames) if total_frames > 0 else 1
print(f"Guardando 1 de cada {frame_interval} frames para obtener ~{target_frames} imágenes")

# Verificar el primer frame con rotación
ret, first_frame = cap.read()
if ret:
    # Rotar 90 grados en sentido horario
    first_frame_rotated = cv2.rotate(first_frame, cv2.ROTATE_90_CLOCKWISE)
    cv2.imshow("Primer frame (corregido)", first_frame_rotated)
    cv2.waitKey(0)  # Presiona cualquier tecla para cerrar
    cv2.imwrite(f"{output_dir}/primer_frame.png", first_frame_rotated)
else:
    print("Error: No se pudo leer el primer frame")
    cap.release()
    exit()

# Reiniciar el video
cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

# Contador de frames
frame_count = 0
saved_count = 0

# Extraer frames
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    if frame_count % frame_interval == 0:
        if frame is None or frame.size == 0:
            print(f"Advertencia: Frame {frame_count} está vacío")
            continue
        
        # Rotar el frame 90 grados en sentido horario
        frame_rotated = cv2.rotate(frame, cv2.ROTATE_90_CLOCKWISE)
        
        # Guardar el frame como PNG, sobrescribiendo si existe
        output_path = f"{output_dir}/frame_{frame_count:04d}.png"
        cv2.imwrite(output_path, frame_rotated)
        saved_count += 1
        
        # Mostrar progreso
        if saved_count % 50 == 0:
            print(f"Guardado: {output_path} ({saved_count} frames)")
    
    frame_count += 1

# Liberar recursos
cap.release()
cv2.destroyAllWindows()
print(f"Extraídos {saved_count} frames en {output_dir}")
